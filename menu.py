# Lista para almacenar las notas (puedes usar n√∫meros enteros o decimales)
notas = []
# Inicializamos la variable que guardar√° la opci√≥n elegida por el usuario
opcion = None 

# Definici√≥n de una funci√≥n para mostrar el men√∫
def mostrar_menu():
    """Muestra las opciones del men√∫ principal."""
    # Imprime una l√≠nea de separaci√≥n y el t√≠tulo
    print("\n--- MEN√ö PRINCIPAL ---")
    # Imprime las opciones disponibles
    print("1. Agregar una nota")
    print("2. Mostrar todas las notas")
    print("3. Calcular promedio, mayor y menor")
    print("4. Terminar programa")
    
# Simulaci√≥n del bucle do-while en Python:
# El bucle 'while True' crea un ciclo infinito que se ejecuta al menos una vez.
# La √∫nica forma de salir ser√° con un 'break' (opci√≥n 4).
while True:
    # Llama a la funci√≥n para mostrar las opciones del men√∫
    mostrar_menu()
    
    # Bloque para manejar la entrada del usuario y posibles errores
    try:
        # Solicita al usuario que ingrese la opci√≥n y la convierte a entero
        opcion = int(input("Seleccione una opci√≥n (1-4): "))
    # Si la entrada no puede convertirse a entero (ej: el usuario escribe "hola")
    except ValueError:
        # Imprime un mensaje de error y usa 'continue'
        print("üõë ¬°Opci√≥n inv√°lida! Por favor, ingrese un n√∫mero del 1 al 4.")
        # 'continue' salta el resto del c√≥digo del bucle y vuelve a la l√≠nea 'while True'
        continue 
        
    # Estructura condicional (if/elif/else) para ejecutar la acci√≥n seg√∫n la opci√≥n
    if opcion == 1:
        # --- L√≥gica para Agregar una nota ---
        try:
            # Pide la nota y la convierte a n√∫mero decimal (float)
            nota = float(input("Ingrese la nota a agregar: "))
            # Agrega la nota a la lista 'notas'
            notas.append(nota)
            # Confirma la acci√≥n
            print(f"‚úÖ Nota {nota} agregada correctamente.")
        except ValueError:
            # Maneja el error si el usuario no ingresa un n√∫mero para la nota
            print("üõë ¬°Entrada inv√°lida! Debe ingresar un n√∫mero para la nota.")
            
    elif opcion == 2:
        # --- L√≥gica para Mostrar todas las notas ---
        # Verifica si la lista 'notas' tiene elementos
        if notas:
            print("\n--- LISTA DE NOTAS ---")
            # Itera sobre la lista para mostrar cada nota con su √≠ndice
            for i, nota in enumerate(notas):
                # Imprime el n√∫mero de nota (i+1) y su valor
                print(f"Nota #{i+1}: {nota}")
        else:
            # Mensaje si la lista est√° vac√≠a
            print("‚ÑπÔ∏è A√∫n no hay notas registradas.")
            
    elif opcion == 3:
        # --- L√≥gica para Calcular promedio, mayor y menor ---
        # Verifica si hay notas para evitar la divisi√≥n por cero o errores en max/min
        if notas:
            # Calcula el promedio: suma de todos los elementos dividido por la cantidad de elementos
            promedio = sum(notas) / len(notas)
            # Encuentra la nota m√°s alta usando la funci√≥n max()
            mayor = max(notas)
            # Encuentra la nota m√°s baja usando la funci√≥n min()
            menor = min(notas)
            
            print("\n--- RESULTADOS ---")
            # Imprime los resultados. :.2f formatea el promedio a dos decimales
            print(f"üìä Promedio de notas: {promedio:.2f}")
            print(f"‚≠ê Nota m√°s alta: {mayor}")
            print(f"‚¨áÔ∏è  Nota m√°s baja: {menor}")
        else:
            # Mensaje si la lista est√° vac√≠a
            print("‚ÑπÔ∏è Necesita agregar notas para realizar c√°lculos.")
            
    elif opcion == 4:
        # --- Terminar programa ---
        print("üëã Terminando programa. ¬°Hasta pronto!")
        # 'break' sale inmediatamente del bucle 'while True' y termina el programa
        break 
        
    else:
        # Mensaje para opciones num√©ricas fuera del rango (1-4)
        print("‚ùå Opci√≥n no reconocida. Seleccione un n√∫mero entre 1 y 4.")
